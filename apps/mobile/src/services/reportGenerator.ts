import RNHTMLtoPDF from 'react-native-html-to-pdf';
import Share from 'react-native-share';
import { analyticsService, KPIMetrics, TrendData, PredictiveMetrics } from './analytics';
import { database } from '../database';
import { TransactionModel } from '../database/models/Transaction';
import { format, subDays, startOfMonth, endOfMonth } from 'date-fns';

export interface ReportConfig {
  title: string;
  dateRange: {
    start: Date;
    end: Date;
  };
  includeCharts: boolean;
  includeTransactions: boolean;
  includePredictions: boolean;
  merchantInfo: {
    name: string;
    address?: string;
    phone?: string;
  };
}

export interface GeneratedReport {
  filePath: string;
  fileName: string;
  size: number;
  createdAt: Date;
}

class ReportGeneratorService {
  private static instance: ReportGeneratorService;

  private constructor() {}

  static getInstance(): ReportGeneratorService {
    if (!ReportGeneratorService.instance) {
      ReportGeneratorService.instance = new ReportGeneratorService();
    }
    return ReportGeneratorService.instance;
  }

  // Generate comprehensive business report
  async generateBusinessReport(
    userId: string,
    merchantId: string | undefined,
    config: ReportConfig
  ): Promise<GeneratedReport> {
    try {
      // Gather all data
      const [kpis, trends, predictions, transactions] = await Promise.all([
        analyticsService.calculateKPIs(userId, merchantId),
        this.getTrendsForReport(userId, merchantId, config.dateRange),
        analyticsService.calculatePredictions(userId, merchantId),
        this.getTransactionsForReport(userId, merchantId, config.dateRange),
      ]);

      // Generate HTML content
      const htmlContent = this.generateHTMLReport(kpis, trends, predictions, transactions, config);

      // Convert to PDF
      const pdfOptions = {
        html: htmlContent,
        fileName: `business_report_${format(new Date(), 'yyyy-MM-dd')}`,
        directory: 'Documents',
      };

      const pdf = await RNHTMLtoPDF.convert(pdfOptions);

      return {
        filePath: pdf.filePath,
        fileName: pdf.fileName,
        size: 0, // Would need to get file size
        createdAt: new Date(),
      };
    } catch (error) {
      console.error('Error generating business report:', error);
      throw error;
    }
  }

  // Generate monthly summary report
  async generateMonthlyReport(
    userId: string,
    merchantId: string | undefined,
    year: number,
    month: number
  ): Promise<GeneratedReport> {
    const startDate = startOfMonth(new Date(year, month - 1));
    const endDate = endOfMonth(new Date(year, month - 1));

    const config: ReportConfig = {
      title: `Monthly Business Report - ${format(startDate, 'MMMM yyyy')}`,
      dateRange: { start: startDate, end: endDate },
      includeCharts: true,
      includeTransactions: true,
      includePredictions: false,
      merchantInfo: {
        name: 'MoMo Merchant', // Would come from user profile
      },
    };

    return this.generateBusinessReport(userId, merchantId, config);
  }

  // Generate transaction summary report
  async generateTransactionReport(
    userId: string,
    merchantId: string | undefined,
    dateRange: { start: Date; end: Date }
  ): Promise<GeneratedReport> {
    const transactions = await this.getTransactionsForReport(userId, merchantId, dateRange);

    const config: ReportConfig = {
      title: `Transaction Report - ${format(dateRange.start, 'MMM dd')} to ${format(dateRange.end, 'MMM dd, yyyy')}`,
      dateRange,
      includeCharts: false,
      includeTransactions: true,
      includePredictions: false,
      merchantInfo: {
        name: 'MoMo Merchant',
      },
    };

    // Generate simpler transaction-focused HTML
    const htmlContent = this.generateTransactionHTMLReport(transactions, config);

    const pdfOptions = {
      html: htmlContent,
      fileName: `transaction_report_${format(new Date(), 'yyyy-MM-dd')}`,
      directory: 'Documents',
    };

    const pdf = await RNHTMLtoPDF.convert(pdfOptions);

    return {
      filePath: pdf.filePath,
      fileName: pdf.fileName,
      size: 0,
      createdAt: new Date(),
    };
  }

  // Share report via system share sheet
  async shareReport(report: GeneratedReport, title?: string): Promise<void> {
    try {
      await Share.open({
        title: title || 'Business Report',
        url: `file://${report.filePath}`,
        type: 'application/pdf',
        message: 'Business report generated by MoMo Merchant App',
      });
    } catch (error) {
      console.error('Error sharing report:', error);
      throw error;
    }
  }

  // Generate HTML for comprehensive business report
  private generateHTMLReport(
    kpis: KPIMetrics,
    trends: TrendData[],
    predictions: PredictiveMetrics,
    transactions: TransactionModel[],
    config: ReportConfig
  ): string {
    const formatCurrency = (amount: number) => `GHS ${amount.toLocaleString('en-GH', { minimumFractionDigits: 2 })}`;
    const formatDate = (date: Date) => format(date, 'MMM dd, yyyy HH:mm');

    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>${config.title}</title>
          <style>
            body {
              font-family: 'Helvetica', 'Arial', sans-serif;
              margin: 0;
              padding: 20px;
              color: #333;
              line-height: 1.6;
            }
            .header {
              text-align: center;
              border-bottom: 2px solid #0ea5e9;
              padding-bottom: 20px;
              margin-bottom: 30px;
            }
            .logo {
              font-size: 24px;
              font-weight: bold;
              color: #0ea5e9;
              margin-bottom: 10px;
            }
            .title {
              font-size: 20px;
              font-weight: bold;
              color: #333;
              margin-bottom: 5px;
            }
            .subtitle {
              color: #666;
              font-size: 14px;
            }
            .section {
              margin-bottom: 30px;
              page-break-inside: avoid;
            }
            .section-title {
              font-size: 18px;
              font-weight: bold;
              color: #0ea5e9;
              border-bottom: 1px solid #eee;
              padding-bottom: 10px;
              margin-bottom: 15px;
            }
            .kpi-grid {
              display: grid;
              grid-template-columns: repeat(2, 1fr);
              gap: 15px;
              margin-bottom: 20px;
            }
            .kpi-card {
              border: 1px solid #ddd;
              border-radius: 8px;
              padding: 15px;
              background: #f9f9f9;
            }
            .kpi-value {
              font-size: 20px;
              font-weight: bold;
              color: #0ea5e9;
              margin-bottom: 5px;
            }
            .kpi-label {
              font-size: 12px;
              color: #666;
              text-transform: uppercase;
              letter-spacing: 0.5px;
            }
            .trend-positive {
              color: #22c55e;
            }
            .trend-negative {
              color: #ef4444;
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin-top: 15px;
            }
            th, td {
              border: 1px solid #ddd;
              padding: 8px 12px;
              text-align: left;
            }
            th {
              background-color: #f5f5f5;
              font-weight: bold;
              color: #333;
            }
            tr:nth-child(even) {
              background-color: #f9f9f9;
            }
            .summary-box {
              background: #f0f9ff;
              border: 1px solid #0ea5e9;
              border-radius: 8px;
              padding: 15px;
              margin: 15px 0;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #eee;
              text-align: center;
              color: #666;
              font-size: 12px;
            }
            @media print {
              body { margin: 0; }
              .page-break { page-break-before: always; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo">MoMo Merchant</div>
            <div class="title">${config.title}</div>
            <div class="subtitle">
              Generated on ${format(new Date(), 'MMMM dd, yyyy')} |
              Period: ${format(config.dateRange.start, 'MMM dd')} - ${format(config.dateRange.end, 'MMM dd, yyyy')}
            </div>
          </div>

          <div class="section">
            <div class="section-title">Executive Summary</div>
            <div class="summary-box">
              <p><strong>Total Revenue:</strong> ${formatCurrency(kpis.totalRevenue)}</p>
              <p><strong>Total Transactions:</strong> ${kpis.totalTransactions.toLocaleString()}</p>
              <p><strong>Success Rate:</strong> ${((kpis.successfulTransactions / Math.max(kpis.totalTransactions, 1)) * 100).toFixed(1)}%</p>
              <p><strong>Growth Rate:</strong> <span class="${kpis.growthRate >= 0 ? 'trend-positive' : 'trend-negative'}">${kpis.growthRate >= 0 ? '+' : ''}${kpis.growthRate.toFixed(1)}%</span> vs last week</p>
            </div>
          </div>

          <div class="section">
            <div class="section-title">Key Performance Indicators</div>
            <div class="kpi-grid">
              <div class="kpi-card">
                <div class="kpi-value">${formatCurrency(kpis.todayRevenue)}</div>
                <div class="kpi-label">Today's Revenue</div>
              </div>
              <div class="kpi-card">
                <div class="kpi-value">${kpis.todayTransactions}</div>
                <div class="kpi-label">Today's Transactions</div>
              </div>
              <div class="kpi-card">
                <div class="kpi-value">${formatCurrency(kpis.averageTransactionValue)}</div>
                <div class="kpi-label">Avg Transaction Value</div>
              </div>
              <div class="kpi-card">
                <div class="kpi-value">${kpis.uniqueCustomers}</div>
                <div class="kpi-label">Unique Customers</div>
              </div>
              <div class="kpi-card">
                <div class="kpi-value">${formatCurrency(kpis.netIncome)}</div>
                <div class="kpi-label">Net Income</div>
              </div>
              <div class="kpi-card">
                <div class="kpi-value">${kpis.transactionsPerDay.toFixed(1)}</div>
                <div class="kpi-label">Daily Transactions</div>
              </div>
            </div>
          </div>

          ${config.includePredictions ? `
          <div class="section">
            <div class="section-title">Cash Flow Predictions</div>
            <div class="summary-box">
              <p><strong>Tomorrow's Prediction:</strong> ${formatCurrency(predictions.predictedRevenue)}</p>
              <p><strong>Next Week:</strong> ${formatCurrency(predictions.nextWeekPrediction)}</p>
              <p><strong>Trend:</strong> ${predictions.trend.charAt(0).toUpperCase() + predictions.trend.slice(1)}</p>
              <p><strong>Confidence:</strong> ${Math.round(predictions.confidence * 100)}%</p>
            </div>
          </div>
          ` : ''}

          ${config.includeTransactions && transactions.length > 0 ? `
          <div class="section">
            <div class="section-title">Recent Transactions</div>
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Type</th>
                  <th>Amount</th>
                  <th>Customer</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                ${transactions.slice(0, 20).map(tx => `
                  <tr>
                    <td>${formatDate(tx.createdAt)}</td>
                    <td>${tx.type.replace('_', ' ').toUpperCase()}</td>
                    <td>${formatCurrency(tx.amount)}</td>
                    <td>${tx.customerName || tx.customerNumber || 'N/A'}</td>
                    <td>${tx.syncStatus === 'synced' ? '✓ Completed' : tx.syncStatus === 'pending' ? '⟳ Pending' : '⚠ Failed'}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
            ${transactions.length > 20 ? `<p><em>Showing first 20 of ${transactions.length} transactions</em></p>` : ''}
          </div>
          ` : ''}

          <div class="footer">
            <p>Report generated by MoMo Merchant Companion App</p>
            <p>Confidential - For business use only</p>
          </div>
        </body>
      </html>
    `;
  }

  // Generate HTML for transaction-focused report
  private generateTransactionHTMLReport(
    transactions: TransactionModel[],
    config: ReportConfig
  ): string {
    const formatCurrency = (amount: number) => `GHS ${amount.toLocaleString('en-GH', { minimumFractionDigits: 2 })}`;
    const formatDate = (date: Date) => format(date, 'MMM dd, yyyy HH:mm');

    const totalAmount = transactions.reduce((sum, tx) => sum + tx.amount, 0);
    const totalCommission = transactions.reduce((sum, tx) => sum + (tx.commission || 0), 0);

    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>${config.title}</title>
          <style>
            body {
              font-family: 'Helvetica', 'Arial', sans-serif;
              margin: 0;
              padding: 20px;
              color: #333;
              line-height: 1.6;
            }
            .header {
              text-align: center;
              border-bottom: 2px solid #0ea5e9;
              padding-bottom: 20px;
              margin-bottom: 30px;
            }
            .title {
              font-size: 20px;
              font-weight: bold;
              color: #333;
              margin-bottom: 5px;
            }
            .summary {
              background: #f0f9ff;
              border: 1px solid #0ea5e9;
              border-radius: 8px;
              padding: 15px;
              margin: 20px 0;
              display: flex;
              justify-content: space-around;
            }
            .summary-item {
              text-align: center;
            }
            .summary-value {
              font-size: 18px;
              font-weight: bold;
              color: #0ea5e9;
            }
            .summary-label {
              font-size: 12px;
              color: #666;
              text-transform: uppercase;
              letter-spacing: 0.5px;
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin-top: 20px;
            }
            th, td {
              border: 1px solid #ddd;
              padding: 8px 12px;
              text-align: left;
            }
            th {
              background-color: #f5f5f5;
              font-weight: bold;
              color: #333;
            }
            tr:nth-child(even) {
              background-color: #f9f9f9;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #eee;
              text-align: center;
              color: #666;
              font-size: 12px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="title">${config.title}</div>
            <div class="summary">
              <div class="summary-item">
                <div class="summary-value">${transactions.length}</div>
                <div class="summary-label">Total Transactions</div>
              </div>
              <div class="summary-item">
                <div class="summary-value">${formatCurrency(totalAmount)}</div>
                <div class="summary-label">Total Amount</div>
              </div>
              <div class="summary-item">
                <div class="summary-value">${formatCurrency(totalCommission)}</div>
                <div class="summary-label">Total Commission</div>
              </div>
              <div class="summary-item">
                <div class="summary-value">${formatCurrency(totalAmount - totalCommission)}</div>
                <div class="summary-label">Net Amount</div>
              </div>
            </div>
          </div>

          <table>
            <thead>
              <tr>
                <th>Date & Time</th>
                <th>Type</th>
                <th>Amount</th>
                <th>Commission</th>
                <th>Net Amount</th>
                <th>Customer</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              ${transactions.map(tx => `
                <tr>
                  <td>${formatDate(tx.createdAt)}</td>
                  <td>${tx.type.replace('_', ' ').toUpperCase()}</td>
                  <td>${formatCurrency(tx.amount)}</td>
                  <td>${formatCurrency(tx.commission || 0)}</td>
                  <td>${formatCurrency(tx.amount - (tx.commission || 0))}</td>
                  <td>${tx.customerName || tx.customerNumber || 'N/A'}</td>
                  <td>${tx.syncStatus === 'synced' ? '✓ Completed' : tx.syncStatus === 'pending' ? '⟳ Pending' : '⚠ Failed'}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>

          <div class="footer">
            <p>Report generated by MoMo Merchant Companion App</p>
            <p>Period: ${format(config.dateRange.start, 'MMM dd')} - ${format(config.dateRange.end, 'MMM dd, yyyy')}</p>
          </div>
        </body>
      </html>
    `;
  }

  // Helper methods
  private async getTrendsForReport(
    userId: string,
    merchantId: string | undefined,
    dateRange: { start: Date; end: Date }
  ): Promise<TrendData[]> {
    const days = Math.ceil((dateRange.end.getTime() - dateRange.start.getTime()) / (1000 * 60 * 60 * 24));
    return analyticsService.getTrendData(userId, merchantId, Math.min(days, 30));
  }

  private async getTransactionsForReport(
    userId: string,
    merchantId: string | undefined,
    dateRange: { start: Date; end: Date }
  ): Promise<TransactionModel[]> {
    const query = [
      Q.where('user_id', userId),
      Q.where('created_at', Q.gte(dateRange.start.getTime())),
      Q.where('created_at', Q.lte(dateRange.end.getTime())),
      Q.sortBy('created_at', Q.desc),
    ];

    if (merchantId) {
      query.push(Q.where('merchant_id', merchantId));
    }

    return database.get<TransactionModel>('transactions')
      .query(...query)
      .fetch();
  }
}

// Export singleton instance
export const reportGenerator = ReportGeneratorService.getInstance();